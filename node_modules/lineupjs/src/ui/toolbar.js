import { getAllToolbarActions, isSupportType, getAllToolbarDialogAddons, isSortingAscByDefault } from '../model/annotations';
import ChangeRendererDialog from './dialogs/ChangeRendererDialog';
import MoreColumnOptionsDialog from './dialogs/MoreColumnOptionsDialog';
import RenameDialog from './dialogs/RenameDialog';
import BooleanFilterDialog from './dialogs/BooleanFilterDialog';
import CategoricalFilterDialog from './dialogs/CategoricalFilterDialog';
import CategoricalMappingFilterDialog from './dialogs/CategoricalMappingFilterDialog';
import CompositeChildrenDialog from './dialogs/CompositeChildrenDialog';
import CutOffHierarchyDialog from './dialogs/CutOffHierarchyDialog';
import EditPatternDialog from './dialogs/EditPatternDialog';
import NumberFilterDialog from './dialogs/NumberFilterDialog';
import ReduceDialog from './dialogs/ReduceDialog';
import ScriptEditDialog from './dialogs/ScriptEditDialog';
import SearchDialog from './dialogs/SearchDialog';
import StringFilterDialog from './dialogs/StringFilterDialog';
import WeightsEditDialog from './dialogs/WeightsEditDialog';
import GroupDialog from './dialogs/GroupDialog';
import { sortMethods } from './dialogs/utils';
import SortDialog from './dialogs/SortDialog';
import { EAdvancedSortMethod, ESortMethod } from '../model/INumberColumn';
import { EDateSort } from '../model/DatesColumn';
import appendNumber from './dialogs/groupNumber';
import appendString from './dialogs/groupString';
import ColorMappingDialog from './dialogs/ColorMappingDialog';
import MappingDialog from './dialogs/MappingDialog';
function ui(title, onClick, options) {
    if (options === void 0) { options = {}; }
    return { title: title, onClick: onClick, options: options };
}
export function dialogContext(ctx, level, evt) {
    return {
        attachment: evt.currentTarget,
        level: level,
        manager: ctx.dialogManager,
        idPrefix: ctx.idPrefix
    };
}
function uiDialog(title, dialogClass, extraArgs, options) {
    if (extraArgs === void 0) { extraArgs = function () { return []; }; }
    if (options === void 0) { options = {}; }
    return {
        title: title,
        onClick: function (col, evt, ctx, level) {
            var dialog = new (dialogClass.bind.apply(dialogClass, [void 0, col, dialogContext(ctx, level, evt)].concat(extraArgs(ctx))))();
            dialog.open();
        }, options: options
    };
}
function uiSortMethod(methods) {
    methods = methods.sort(function (a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()); });
    return {
        title: 'Sort By',
        order: 2,
        append: function (col, node, dialog) {
            sortMethods(node, col, methods, dialog.idPrefix);
        }
    };
}
var sort = {
    title: 'Sort',
    onClick: function (col, evt, ctx, level) {
        ctx.dialogManager.removeAboveLevel(level);
        if (!evt.ctrlKey) {
            col.toggleMySorting();
            return;
        }
        var ranking = col.findMyRanker();
        var current = ranking.getSortCriteria();
        var order = col.isSortedByMe();
        var isAscByDefault = isSortingAscByDefault(col);
        if (order.priority === undefined) {
            ranking.sortBy(col, isAscByDefault, current.length);
            return;
        }
        var next = undefined;
        if (isAscByDefault) {
            next = order.asc ? 'desc' : undefined;
        }
        else {
            next = !order.asc ? 'asc' : undefined;
        }
        ranking.sortBy(col, next === 'asc', next ? order.priority : -1);
    },
    options: {
        shortcut: 'only',
        order: 1
    }
};
var sortBy = {
    title: 'Sort By &hellip;',
    onClick: function (col, evt, ctx, level) {
        var dialog = new SortDialog(col, false, dialogContext(ctx, level, evt), ctx);
        dialog.open();
    },
    options: {
        shortcut: false,
        order: 1
    }
};
var sortGroupBy = {
    title: 'Sort Groups By &hellip;',
    onClick: function (col, evt, ctx, level) {
        var dialog = new SortDialog(col, true, dialogContext(ctx, level, evt), ctx);
        dialog.open();
    },
    options: {
        shortcut: false,
        order: 3
    }
};
var rename = {
    title: 'Rename + Color &hellip;',
    onClick: function (col, evt, ctx, level) {
        var dialog = new RenameDialog(col, dialogContext(ctx, level, evt));
        dialog.open();
    },
    options: {
        order: 4
    }
};
var vis = {
    title: 'Visualization &hellip;',
    onClick: function (col, evt, ctx, level) {
        var dialog = new ChangeRendererDialog(col, dialogContext(ctx, level, evt), ctx);
        dialog.open();
    },
    options: {}
};
var clone = {
    title: 'Clone',
    onClick: function (col, _evt, ctx) {
        ctx.dialogManager.removeAll();
        ctx.provider.takeSnapshot(col);
    },
    options: {
        order: 80
    }
};
var more = {
    title: 'More &hellip;',
    onClick: function (col, evt, ctx, level) {
        var dialog = new MoreColumnOptionsDialog(col, dialogContext(ctx, level, evt), ctx);
        dialog.open();
    },
    options: {
        shortcut: true,
        order: 100
    }
};
var remove = {
    title: 'Remove',
    onClick: function (col, _evt, ctx) {
        ctx.dialogManager.removeAll();
        var ranking = col.findMyRanker();
        var last = ranking.children.every(function (d) { return isSupportType(d) || d.fixed || d === col; });
        if (!last) {
            col.removeMe();
            return;
        }
        ctx.provider.removeRanking(ranking);
        ctx.provider.ensureOneRanking();
    },
    options: {
        order: 90
    }
};
var group = ui('Group', function (col, evt, ctx, level) {
    ctx.dialogManager.removeAboveLevel(level);
    if (!evt.ctrlKey) {
        col.groupByMe();
        return;
    }
    var ranking = col.findMyRanker();
    var current = ranking.getGroupCriteria();
    var order = current.indexOf(col);
    ranking.groupBy(col, order >= 0 ? -1 : current.length);
}, { shortcut: 'only', order: 2 });
var groupBy = ui('Group By &hellip;', function (col, evt, ctx, level) {
    var dialog = new GroupDialog(col, dialogContext(ctx, level, evt), ctx);
    dialog.open();
}, { shortcut: false, order: 2 });
var collapse = ui('Compress', function (col, evt, ctx, level) {
    ctx.dialogManager.removeAboveLevel(level);
    var mcol = col;
    mcol.setCollapsed(!mcol.getCollapsed());
    var i = evt.currentTarget;
    i.title = mcol.getCollapsed() ? 'Expand' : 'Compress';
});
var toolbarAddons = {
    sortNumber: uiSortMethod(Object.keys(EAdvancedSortMethod)),
    sortNumbers: uiSortMethod(Object.keys(EAdvancedSortMethod)),
    sortBoxPlot: uiSortMethod(Object.keys(ESortMethod)),
    sortDates: uiSortMethod(Object.keys(EDateSort)),
    sortGroup: uiSortMethod(['count', 'name']),
    groupNumber: {
        title: 'Split',
        order: 2,
        append: appendNumber
    },
    groupString: {
        title: 'Groups',
        order: 2,
        append: appendString
    }
};
export var toolbarActions = Object.assign({
    group: group,
    groupBy: groupBy,
    collapse: collapse,
    sort: sort,
    sortBy: sortBy,
    sortGroupBy: sortGroupBy,
    more: more,
    clone: clone,
    remove: remove,
    rename: rename,
    search: uiDialog('Search &hellip;', SearchDialog, function (ctx) { return [ctx.provider]; }, { shortcut: true, order: 3 }),
    filterNumber: uiDialog('Filter &hellip;', NumberFilterDialog, function (ctx) { return [ctx]; }, { shortcut: true }),
    filterString: uiDialog('Filter &hellip;', StringFilterDialog, function () { return []; }, { shortcut: true }),
    filterCategorical: uiDialog('Filter &hellip;', CategoricalFilterDialog, function () { return []; }, { shortcut: true }),
    filterOrdinal: uiDialog('Filter &hellip;', CategoricalMappingFilterDialog, function () { return []; }, { shortcut: true }),
    filterBoolean: uiDialog('Filter &hellip;', BooleanFilterDialog, function () { return []; }, { shortcut: true }),
    colorMapped: uiDialog('Color Mapping &hellip;', ColorMappingDialog, function () { return []; }, { shortcut: false }),
    script: uiDialog('Edit Combine Script &hellip;', ScriptEditDialog, function () { return []; }, { shortcut: true }),
    reduce: uiDialog('Reduce by &hellip;', ReduceDialog),
    cutoff: uiDialog('Set Cut Off &hellip;', CutOffHierarchyDialog, function (ctx) { return [ctx.idPrefix]; }),
    editMapping: uiDialog('Data Mapping &hellip;', MappingDialog, function (ctx) { return [ctx]; }),
    editPattern: uiDialog('Edit Pattern &hellip;', EditPatternDialog, function (ctx) { return [ctx.idPrefix]; }),
    editWeights: uiDialog('Edit Weights &hellip;', WeightsEditDialog, function () { return []; }, { shortcut: true }),
    compositeContained: uiDialog('Contained Columns &hellip;', CompositeChildrenDialog, function (ctx) { return [ctx]; }),
    splitCombined: ui('Split Combined Column', function (col, _evt, ctx, level) {
        ctx.dialogManager.removeAboveLevel(level);
        col.children.reverse().forEach(function (c) { return col.insertAfterMe(c); });
        col.removeMe();
    }),
    invertSelection: ui('Invert Selection', function (col, _evt, ctx, level) {
        ctx.dialogManager.removeAboveLevel(level - 1);
        var s = ctx.provider.getSelection();
        var order = col.findMyRanker().getOrder();
        if (s.length === 0) {
            ctx.provider.setSelection(order);
            return;
        }
        var ss = new Set(s);
        var others = order.filter(function (d) { return !ss.has(d); });
        ctx.provider.setSelection(others);
    })
}, toolbarAddons);
var cache = new Map();
var cacheAddon = new Map();
export default function getToolbar(col, ctx) {
    if (cache.has(col.desc.type)) {
        return cache.get(col.desc.type);
    }
    var icons = ctx.toolbar;
    var actions = new Set();
    if (!col.fixed) {
        actions.add(remove);
    }
    {
        var possible = ctx.getPossibleRenderer(col);
        if (possible.item.length > 2 || possible.group.length > 2 || possible.summary.length > 2) {
            actions.add(vis);
        }
    }
    if (!isSupportType(col)) {
        actions.add(sort);
        actions.add(sortBy);
        actions.add(rename);
        actions.add(clone);
    }
    var keys = getAllToolbarActions(col);
    keys.forEach(function (key) {
        if (icons.hasOwnProperty(key)) {
            actions.add(icons[key]);
        }
        else {
            console.warn('cannot find: ', col.desc.type, key);
        }
    });
    if (actions.size > 0) {
        actions.add(more);
    }
    var r = Array.from(actions).sort(function (a, b) {
        if (a.options.order === b.options.order) {
            return a.title.localeCompare(b.title);
        }
        return (a.options.order || 50) - (b.options.order || 50);
    });
    cache.set(col.desc.type, r);
    return r;
}
export function getToolbarDialogAddons(col, key, ctx) {
    var cacheKey = col.desc.type + "@" + key;
    if (cacheAddon.has(cacheKey)) {
        return cacheAddon.get(cacheKey);
    }
    var icons = ctx.toolbar;
    var actions = new Set();
    var keys = getAllToolbarDialogAddons(col, key);
    keys.forEach(function (key) {
        if (icons.hasOwnProperty(key)) {
            actions.add(icons[key]);
        }
        else {
            console.warn('cannot find: ', col.desc.type, key);
        }
    });
    var r = Array.from(actions).sort(function (a, b) {
        if (a.order === b.order) {
            return a.title.localeCompare(b.title);
        }
        return (a.order || 50) - (b.order || 50);
    });
    cacheAddon.set(cacheKey, r);
    return r;
}
export function isSortAble(col, ctx) {
    var toolbar = getToolbar(col, ctx);
    return toolbar.includes(sortBy);
}
export function isGroupAble(col, ctx) {
    var toolbar = getToolbar(col, ctx);
    return toolbar.includes(groupBy);
}
export function isGroupSortAble(col, ctx) {
    var toolbar = getToolbar(col, ctx);
    return toolbar.includes(sortGroupBy);
}
//# sourceMappingURL=toolbar.js.map