import * as tslib_1 from "tslib";
import { timeFormat, timeParse } from 'd3-time-format';
import { Category } from './annotations';
import { FIRST_IS_MISSING, isMissingValue } from './missing';
import ValueColumn from './ValueColumn';
var DateColumn = (function (_super) {
    tslib_1.__extends(DateColumn, _super);
    function DateColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.format = timeFormat(desc.dateFormat || '%x');
        _this.parse = desc.dateParse ? timeParse(desc.dateParse) : timeParse(desc.dateFormat || '%x');
        _this.setDefaultRenderer('default');
        return _this;
    }
    DateColumn.prototype.getValue = function (row) {
        var v = _super.prototype.getValue.call(this, row);
        if (isMissingValue(v)) {
            return null;
        }
        if (v instanceof Date) {
            return v;
        }
        return this.parse(String(v));
    };
    DateColumn.prototype.getLabel = function (row) {
        var v = this.getValue(row);
        if (!(v instanceof Date)) {
            return '';
        }
        return this.format(v);
    };
    DateColumn.prototype.compare = function (a, b) {
        var av = this.getValue(a);
        var bv = this.getValue(b);
        if (av === bv) {
            return 0;
        }
        if (!(av instanceof Date)) {
            return (bv instanceof Date) ? FIRST_IS_MISSING : 0;
        }
        if (!(bv instanceof Date)) {
            return FIRST_IS_MISSING * -1;
        }
        return av.getTime() - bv.getTime();
    };
    DateColumn = tslib_1.__decorate([
        Category('date')
    ], DateColumn);
    return DateColumn;
}(ValueColumn));
export default DateColumn;
//# sourceMappingURL=DateColumn.js.map