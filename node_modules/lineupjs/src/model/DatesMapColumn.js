import * as tslib_1 from "tslib";
import { timeFormat, timeParse } from 'd3-time-format';
import MapColumn from './MapColumn';
import { isMissingValue } from './missing';
var DatesMapColumn = (function (_super) {
    tslib_1.__extends(DatesMapColumn, _super);
    function DatesMapColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.format = timeFormat(desc.dateFormat || '%x');
        _this.parse = desc.dateParse ? timeParse(desc.dateParse) : timeParse(desc.dateFormat || '%x');
        _this.setDefaultRenderer('default');
        return _this;
    }
    DatesMapColumn.prototype.parseValue = function (v) {
        if (isMissingValue(v)) {
            return null;
        }
        if (v instanceof Date) {
            return v;
        }
        return this.parse(String(v));
    };
    DatesMapColumn.prototype.getValue = function (row) {
        var _this = this;
        return _super.prototype.getValue.call(this, row).map(function (_a) {
            var key = _a.key, value = _a.value;
            return ({
                key: key,
                value: _this.parseValue(value)
            });
        });
    };
    DatesMapColumn.prototype.getLabels = function (row) {
        var _this = this;
        return this.getValue(row).map(function (_a) {
            var key = _a.key, value = _a.value;
            return ({
                key: key,
                value: (value instanceof Date) ? _this.format(value) : ''
            });
        });
    };
    return DatesMapColumn;
}(MapColumn));
export default DatesMapColumn;
//# sourceMappingURL=DatesMapColumn.js.map