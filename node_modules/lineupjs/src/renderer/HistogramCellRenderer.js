import { DENSE_HISTOGRAM } from '../config';
import { computeStats, getNumberOfBins, round } from '../internal/math';
import { isMissingValue } from '../model';
import { DEFAULT_FORMATTER, isNumberColumn, isNumbersColumn } from '../model/INumberColumn';
import { isMapAbleColumn } from '../model/MappingFunction';
import InputNumberDialog from '../ui/dialogs/InputNumberDialog';
import { filterMissingNumberMarkup, updateFilterMissingNumberMarkup } from '../ui/missing';
import { colorOf } from './impose';
import { ERenderMode } from './interfaces';
import { renderMissingDOM } from './missing';
import { noop } from './utils';
import { dragHandle } from '../internal/drag';
var HistogramCellRenderer = (function () {
    function HistogramCellRenderer() {
        this.title = 'Histogram';
    }
    HistogramCellRenderer.prototype.canRender = function (col, mode) {
        return (isNumberColumn(col) && mode !== ERenderMode.CELL) || (isNumbersColumn(col) && mode === ERenderMode.CELL);
    };
    HistogramCellRenderer.prototype.create = function (col, context, hist, imposer) {
        var _a = getHistDOMRenderer(context.totalNumberOfRows, col, imposer), template = _a.template, render = _a.render, guessedBins = _a.guessedBins;
        return {
            template: template + "</div>",
            update: function (n, row) {
                if (renderMissingDOM(n, col, row)) {
                    return;
                }
                render(n, createHist(hist, guessedBins, [row], col));
            },
            render: noop
        };
    };
    HistogramCellRenderer.prototype.createGroup = function (col, context, hist, imposer) {
        var _a = getHistDOMRenderer(context.totalNumberOfRows, col, imposer), template = _a.template, render = _a.render, guessedBins = _a.guessedBins;
        return {
            template: template + "</div>",
            update: function (n, _group, rows) {
                render(n, createHist(hist, guessedBins, rows, col));
            }
        };
    };
    HistogramCellRenderer.prototype.createSummary = function (col, context, interactive, imposer) {
        var r = getHistDOMRenderer(context.totalNumberOfRows, col, imposer);
        var staticHist = !interactive || !isMapAbleColumn(col);
        return staticHist ? staticSummary(col, r.template, r.render) : interactiveSummary(col, context, r.template, r.render);
    };
    return HistogramCellRenderer;
}());
export default HistogramCellRenderer;
function staticSummary(col, template, render) {
    if (isMapAbleColumn(col)) {
        var range = col.getRange();
        template += "<span>" + range[0] + "</span><span>" + range[1] + "</span>";
    }
    return {
        template: template + "</div>",
        update: function (node, hist) {
            if (isMapAbleColumn(col)) {
                var range_1 = col.getRange();
                Array.from(node.querySelectorAll('span')).forEach(function (d, i) { return d.textContent = range_1[i]; });
            }
            node.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            render(node, { bins: hist.hist.length, max: hist.maxBin, hist: hist.hist });
        }
    };
}
function interactiveSummary(col, context, template, render) {
    var f = filter(col);
    template += "\n      <div data-handle=\"min-hint\" style=\"width: " + f.percent(f.filterMin) + "%\"></div>\n      <div data-handle=\"max-hint\" style=\"width: " + (100 - f.percent(f.filterMax)) + "%\"></div>\n      <div data-handle=\"min\" data-value=\"" + round(f.filterMin, 2) + "\" style=\"left: " + f.percent(f.filterMin) + "%\" title=\"min filter, drag or shift click to change\"></div>\n      <div data-handle='max' data-value=\"" + round(f.filterMax, 2) + "\" style=\"right: " + (100 - f.percent(f.filterMax)) + "%\" title=\"max filter, drag or shift click to change\"></div>\n      " + filterMissingNumberMarkup(f.filterMissing, 0, context.idPrefix) + "\n    ";
    var updateFilter;
    return {
        template: template + "</div>",
        update: function (node, hist) {
            if (!updateFilter) {
                updateFilter = initFilter(node, col, context);
            }
            updateFilter(hist ? hist.missing : 0, col);
            node.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            render(node, { bins: hist.hist.length, max: hist.maxBin, hist: hist.hist });
        }
    };
}
function initFilter(node, col, context) {
    var min = node.querySelector('[data-handle=min]');
    var max = node.querySelector('[data-handle=max]');
    var minHint = node.querySelector('[data-handle=min-hint]');
    var maxHint = node.querySelector('[data-handle=max-hint]');
    var filterMissing = node.querySelector('input');
    var setFilter = function () {
        var f = filter(col);
        var minValue = f.unpercent(parseFloat(min.style.left));
        var maxValue = f.unpercent(100 - parseFloat(max.style.right));
        col.setFilter({
            filterMissing: filterMissing.checked,
            min: Math.abs(minValue - f.domain[0]) < 0.001 ? NaN : minValue,
            max: Math.abs(maxValue - f.domain[1]) < 0.001 ? NaN : maxValue
        });
    };
    min.onclick = function (evt) {
        if (!evt.shiftKey) {
            return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        var f = filter(col);
        var value = f.unpercent(parseFloat(min.style.left));
        var dialogCtx = {
            attachment: min,
            manager: context.dialogManager,
            level: 1,
            idPrefix: context.idPrefix
        };
        var dialog = new InputNumberDialog(dialogCtx, function (newValue) {
            minHint.style.width = f.percent(newValue) + "%";
            min.dataset.value = round(newValue, 2).toString();
            min.style.left = f.percent(newValue) + "%";
            setFilter();
        }, {
            value: value, min: f.domain[0], max: f.domain[1]
        });
        dialog.open();
    };
    max.onclick = function (evt) {
        if (!evt.shiftKey) {
            return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        var f = filter(col);
        var value = f.unpercent(100 - parseFloat(max.style.right));
        var dialogCtx = {
            attachment: max,
            manager: context.dialogManager,
            level: 1,
            idPrefix: context.idPrefix
        };
        var dialog = new InputNumberDialog(dialogCtx, function (newValue) {
            maxHint.style.width = 100 - f.percent(newValue) + "%";
            max.dataset.value = round(newValue, 2).toString();
            max.style.right = 100 - f.percent(newValue) + "%";
            setFilter();
        }, {
            value: value, min: f.domain[0], max: f.domain[1]
        });
        dialog.open();
    };
    filterMissing.onchange = function () { return setFilter(); };
    var options = {
        minDelta: 0,
        filter: function (evt) { return evt.button === 0 && !evt.shiftKey; },
        onStart: function (handle) { return handle.classList.add('lu-dragging'); },
        onDrag: function (handle, x) {
            var total = node.clientWidth;
            var px = Math.max(0, Math.min(x, total));
            var percent = Math.round(100 * px / total);
            var domain = col.getMapping().domain;
            handle.dataset.value = round(((percent / 100) * (domain[1] - domain[0]) + domain[0]), 2).toString();
            if (handle.dataset.handle === 'min') {
                handle.style.left = percent + "%";
                minHint.style.width = percent + "%";
                return;
            }
            handle.style.right = 100 - percent + "%";
            maxHint.style.width = 100 - percent + "%";
        },
        onEnd: function (handle) {
            handle.classList.remove('lu-dragging');
            setFilter();
        }
    };
    dragHandle(min, options);
    dragHandle(max, options);
    return function (missing, actCol) {
        col = actCol;
        var f = filter(col);
        minHint.style.width = f.percent(f.filterMin) + "%";
        maxHint.style.width = 100 - f.percent(f.filterMax) + "%";
        min.dataset.value = round(f.filterMin, 2).toString();
        max.dataset.value = round(f.filterMax, 2).toString();
        min.style.left = f.percent(f.filterMin) + "%";
        max.style.right = 100 - f.percent(f.filterMax) + "%";
        filterMissing.checked = f.filterMissing;
        updateFilterMissingNumberMarkup(filterMissing.parentElement, missing);
    };
}
function createHist(globalHist, guessedBins, rows, col) {
    var _a;
    var bins = globalHist ? globalHist.hist.length : guessedBins;
    var stats;
    if (isNumbersColumn(col)) {
        var values = (_a = []).concat.apply(_a, rows.map(function (r) { return col.getNumbers(r); }));
        stats = computeStats(values, function (v) { return v; }, isMissingValue, [0, 1], bins);
    }
    else {
        stats = computeStats(rows, function (r) { return col.getNumber(r); }, function (r) { return col.isMissing(r); }, [0, 1], bins);
    }
    var max = Math.max(stats.maxBin, globalHist ? globalHist.maxBin : 0);
    return { bins: bins, max: max, hist: stats.hist };
}
export function getHistDOMRenderer(totalNumberOfRows, col, imposer) {
    var guessedBins = getNumberOfBins(totalNumberOfRows);
    var bins = '';
    for (var i = 0; i < guessedBins; ++i) {
        bins += "<div title=\"Bin " + i + ": 0\" data-x=\"\"><div style=\"height: 0\" ></div></div>";
    }
    var render = function (n, stats) {
        var bins = stats.bins, max = stats.max, hist = stats.hist;
        var nodes = Array.from(n.querySelectorAll('[data-x]'));
        if (nodes.length > bins) {
            nodes.splice(bins, nodes.length - bins).forEach(function (d) { return d.remove(); });
        }
        else if (nodes.length < bins) {
            for (var i = nodes.length; i < bins; ++i) {
                n.insertAdjacentHTML('afterbegin', "<div title=\"Bin " + i + ": 0\" data-x=\"\"><div style=\"height: 0\" ></div></div>");
            }
            nodes = Array.from(n.querySelectorAll('[data-x]'));
        }
        n.classList.toggle('lu-dense', bins > DENSE_HISTOGRAM);
        nodes.forEach(function (d, i) {
            var _a = hist[i], x0 = _a.x0, x1 = _a.x1, length = _a.length;
            var inner = d.firstElementChild;
            d.title = DEFAULT_FORMATTER(x0) + " - " + DEFAULT_FORMATTER(x1) + " (" + length + ")";
            d.dataset.x = DEFAULT_FORMATTER(x0);
            inner.style.height = Math.round(length * 100 / max) + "%";
            inner.style.backgroundColor = colorOf(col, null, imposer, (x1 + x0) / 2);
        });
    };
    return {
        template: "<div" + (guessedBins > DENSE_HISTOGRAM ? ' class="lu-dense' : '') + ">" + bins,
        render: render,
        guessedBins: guessedBins
    };
}
function filter(col) {
    var filter = col.getFilter();
    var domain = col.getMapping().domain;
    var percent = function (v) { return Math.round(100 * (v - domain[0]) / (domain[1] - domain[0])); };
    var unpercent = function (v) { return ((v / 100) * (domain[1] - domain[0]) + domain[0]); };
    var filterMin = isFinite(filter.min) ? filter.min : domain[0];
    var filterMax = isFinite(filter.max) ? filter.max : domain[1];
    return {
        filterMissing: filter.filterMissing,
        domain: domain,
        percent: percent,
        unpercent: unpercent,
        filterMin: filterMin,
        filterMax: filterMax
    };
}
//# sourceMappingURL=HistogramCellRenderer.js.map